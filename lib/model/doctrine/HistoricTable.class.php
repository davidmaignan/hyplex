<?php

/**
 * HistoricTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class HistoricTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return object HistoricTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('Historic');
    }
    
    
    public function getDailyGeoLocation($start = null, $end = null){
    	
    	$culture = sfContext::getInstance()->getUser()->getCulture();
    	
    	if(is_null($start)){
           $start = new DateTime();
        }else{
           $start = new DateTime($start);
        }
        
        if(is_null($end)){
            $end = new DateTime($start->format('Y-m-d H:i:s'));
            $end->modify('+1 day');
        }
    	
    	$q = Doctrine_Query::create()
				->select('a.id, t.name as name, b.id, count(a.session_id) as total')
                ->from('historic a')
                ->leftJoin('a.Country b')
                ->leftJoin('b.Translation t')
                ->where('t.lang = ?', $culture)
                ->andWhere('a.date > ?', $start->format('Y-m-d'))
                ->andWhere('a.date < ?', $end->format('Y-m-d'))
				->groupBy('a.country_id, a.session_id')
				->orderBy('t.name')
                ->fetchArray();
                
        $return = array();
        foreach($q as $value){
        	$return[$value['name']] = (int)$value['total'];
        }        
                
        return $return;
    }
    
    public function getIPsWithCountryIdNull(){
    	
    	$q = Doctrine_Query::create()
    		->select('DISTINCT (c.ip) as ip')
    		->from('Historic c')
    		->fetchArray();

    	
    	$result = array();
    	
    	foreach($q as $value){
    		
    		if(!in_array($value['ip'], $result)){
    			array_push($result,$value['ip']);
    		}
    		//echo $value['ip'];
    	}
    	
    	return $result;
    	
    	exit;
    }
    
    
    /**
     * Return historic with country
     */
    public function getByCountryIsNULL($value = NULL){
    	
    	$q = Doctrine_Query::create()
    				->from('historic a')
    				->where('a.country_id is NULL')
    				->execute();
    				//->toArray();
    				
    	return $q;
    	
    }
    
    /**
     * Retrieve searches request: module LIKE %search%
     * @param $type
     * @param $start datetime
     * @param $end datetime
     */
    public function getSearches($type, $start = null, $end = null){
        
        if(is_null($start)){
           $start = new DateTime();
        }else{
           $start = new DateTime($start);
        }
        
        if(is_null($end)){
            $end = new DateTime($start->format('Y-m-d H:i:s'));
            $end->modify('+1 day');
        }
        
        $q = Doctrine_Query::create()
                ->from('historic a')
                ->where('a.date > ?', $start->format('Y-m-d'))
                ->andWhere('a.date < ?', $end->format('Y-m-d'))
                ->andwhere('a.module LIKE ?', "%search%")
                ->execute()
                ->toArray();
        
        //Flight / Hotel
        $flight = new PlexSearchFlightStat();
        $hotel = new PlexSearchHotelStat();

        foreach($q as $data){

            switch ($data['module']) {

                case 'searchFlight':
                    $flight->parseData($data);
                    break;

                case 'searchHotel':
                    $hotel->parseData($data);
                    break;

                default:
                    break;
            }

        }
        
        return array('flight'=>$flight,'hotel'=>$hotel);
        

    }
    
    /**
     * Get Browser stats
     * @param type $start
     * @param DateTime $end
     * @return type 
     */
    public function getDailyStatsBrowser($start = null, $end = null){
        
        if(is_null($start)){
           $start = new DateTime();
        }else{
           $start = new DateTime($start);
        }
        
        if(is_null($end)){
            $end = new DateTime($start->format('Y-m-d H:i:s'));
            $end->modify('+1 day');
        }
        
        
        $q = Doctrine_Query::create()
                ->from('historic a')
                ->select('count(a.id) AS total, a.browser, a.os')
                ->groupBy('a.browser, a.os')
                ->where('a.date > ?', $start->format('Y-m-d'))
                ->andWhere('a.date < ?', $end->format('Y-m-d'))
                ->execute()
                ->toArray();
        
        $ar = array('os', 'browser','total');
        
        self::cleanDatas($q, $ar);
        
        $browser = array('Chrome'=>0,'Firefox'=>0,'MSIE'=>0,'Opera'=>0,'Safari'=>0);
        $OS = array('Macintosh','Linux','Windows','Iphone');
        
        $result = array();
        
        foreach ($OS as $value) {
            $result[$value] = $browser;
        } 
        
        foreach($q as $key=>$value){
            $result[$value['os']][$value['browser']] = (int)$value['total'];
        }
        
        return $result;
    }
    
    public function getDailyStatsPerUserList($start = null, $end = null){
        
        if(is_null($start)){
           $start = new DateTime();
        }else{
           $start = new DateTime($start);
        }
        
        if(is_null($end)){
            $end = new DateTime($start->format('Y-m-d H:i:s'));
            $end->modify('+1 day');
        }
        
        $q = Doctrine_Query::create()
                ->from('historic a')
                ->where('a.date > ?', $start->format('Y-m-d'))
                ->andWhere('a.date < ?', $end->format('Y-m-d'))
                ->execute()
                ->toArray();
        
        $ar = array('ip','folder','os','browser','version','start','end','total');
        
        
        
        
        self::cleanDatas($q, $ar);
        
        var_dump($q);
        
        exit;
        
    }
    
    
    /**
     * Get Operating System stats
     * @param type $start
     * @param DateTime $end
     * @return type 
     */
    public function getDailyOSStats($start = null, $end = null){
        
        if(is_null($start)){
           $start = new DateTime();
        }else{
           $start = new DateTime($start);
        }
        
        if(is_null($end)){
            $end = new DateTime($start->format('Y-m-d H:i:s'));
            $end->modify('+1 day');
        }
        
        
        $q = Doctrine_Query::create()
                ->from('historic a')
                ->select('count(a.id) AS total, a.os')
                ->groupBy('a.os')
                ->where('a.date > ?', $start->format('Y-m-d'))
                ->andWhere('a.date < ?', $end->format('Y-m-d'))
                ->execute()
                ->toArray();
        
        $ar = array('os','total');
        
        self::cleanDatas($q, $ar);
        
        $datas = array();
        
        foreach($q as $v){
            $datas[$v['os']] = (int)$v['total'];
        }
        
        return ($datas);
    }
    
    /**
     * Get Stats per User
     * @param type $start
     * @param DateTime $end
     * @return type 
     */
    public function getDailyStatsPerUser($start = null, $end = null){
        
        if(is_null($start)){
           $start = new DateTime();
        }else{
           $start = new DateTime($start);
        }
        
        if(is_null($end)){
            $end = new DateTime($start->format('Y-m-d H:i:s'));
            $end->modify('+1 day');
        }
        
        
        
        $q = Doctrine_Query::create()
                ->select('a.folder, a.ip, a.os, a.browser, a.session_id,  
                		  a.version, MIN(a.date) AS start, MAX(a.date) AS end, 
                		  count(a.id) AS total')
                ->addSelect('(SELECT count(b.id) FROM Historic b WHERE (b.module LIKE "search%" AND b.session_id = a.session_id)) as totalSearch')
                ->from('historic a')
                ->groupBy('a.session_id, DATE_FORMAT(a.date,"%Y-%m-%d")')
                ->orderBy('total desc')
                ->where('a.date > ?', $start->format('Y-m-d'))
                ->andWhere('a.date < ?', $end->format('Y-m-d'))
                ->fetchArray();
                
        //var_dump($q[0]);
        //exit;
                
        return $q;
                
        
    }
    
    
    /**
     * Get Stats per hour
     * @param type $start
     * @param DateTime $end
     * @return type 
     */
    public function getDailyStatsPerHour($start = null, $end = null){
        
        if(is_null($start)){
           $start = new DateTime();
        }else{
           $start = new DateTime($start);
        }
        
        if(is_null($end)){
            $end = new DateTime($start->format('Y-m-d H:i:s'));
            $end->modify('+1 day');
        }
        
        
        $q = Doctrine_Query::create()
                ->from('historic a')
                ->select('DATE_FORMAT(a.date,"%H") as date, count(a.id) AS total')
                ->groupBy('DATE_FORMAT(a.date,"%Y-%m-%d %H")')
                ->where('a.date > ?', $start->format('Y-m-d'))
                ->andWhere('a.date < ?', $end->format('Y-m-d'))
                ->orderBy('a.date asc')
                ->execute()
                ->toArray();
        
        $ar = array('date','total');
        self::cleanDatas($q, $ar);
        
        //Build hourly array
        $keys = range(0,24);
        $values = array_fill(0, 24, 0);
        
        foreach ($q as $value) {
            $values[(int)$value['date']] = $value['total'];
        }
        
        return ($values);   
    }
    
    
    public function getDailyStatsLanguage($start = null, $end = null){
        
        if(is_null($start)){
           $start = new DateTime();
        }else{
           $start = new DateTime($start);
        }
        
        if(is_null($end)){
            $end = new DateTime($start->format('Y-m-d H:i:s'));
            $end->modify('+1 day');
        }
        
        
        $q = Doctrine_Query::create()
                ->from('historic a')
                ->select('a.language, count(a.id) AS total')
                ->groupBy('a.language')
                ->where('a.date > ?', $start->format('Y-m-d'))
                ->andWhere('a.date < ?', $end->format('Y-m-d'))
                ->orderBy('a.date asc')
                ->execute()
                ->toArray();
        
        $ar = array('language','total');
        self::cleanDatas($q, $ar);
        
        $keys = sfConfig::get('app_languages_available');
        $final = array_fill(0, count($keys), 0);
        
        $final = array_combine($keys, $final);
        
        foreach($q as $key=>$value){
            $final[$value['language']] = (int)$value['total'];   
        }
        
        return $final;
    }
    
    
    static public function cleanDatas(&$datas, $ar){
        
        
        foreach($datas as &$data){
            
            foreach($data as $k=>$d){
                if(!in_array($k, $ar)){
                    unset($data[$k]);
                }
            }
            
        }

        
        return $datas;
    }
    
    
    
    
}