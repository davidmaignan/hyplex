<?php

/**
 * TopDestination
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    hypertech_booking
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7691 2011-02-04 15:43:29Z jwage $
 */
class TopDestination extends BaseTopDestination
{
    public function save(Doctrine_Connection $conn = null) {
        if($this->isNew() && php_sapi_name() != 'cli' && !empty($_SERVER['REMOTE_ADDR'])){
            $this->setRank(TopDestinationTable::getMaxRank()+1);
        }

        return parent::save($conn);

    }


    public function delete(Doctrine_Connection $conn = null) {
        //retrieve rank
        $rank = $this->getRank();

        //Decrement all the above ranks
        $q = Doctrine_Query::create()
                ->update('TopDestination')
                ->set('rank','rank - 1')
                ->where('rank > ?',$rank)
                ->execute();

        return parent::delete($conn);


    }

    public function swap($item) {

        $conn = Doctrine_Manager::connection();

        try {
            $conn->beginTransaction();
            $new_rank = $this->getRank();
            $this->setRank($item->getRank());
            $this->save();
            $item->setRank($new_rank);
            $item->save();
            $conn->commit();
        } catch (Doctrine_Exception $e) {
            $conn->rollback();
        }

    }

    public function getFilenameSrc()
    {
        if(!$this->getFilename())
        {
            return null;
        }

        return $this->getFilenameDirSrc(). '/'.$this->getFilename();
    }

    public function getFilenameFilePath()
    {
        if(!$this->getFilename())
        {
            return null;
        }

        return $this->getFilenameDirPath(). '/' .$this->getFilename();
    }

    public function getFilenameDirSrc()
    {
        return '/uploads/images/top_destination';
    }

    public function getFilenameDirPath()
    {
        return sfConfig::get('sf_upload_dir').'/images/top_destination';
    }


    public function  preSave($event)
    {
        $modified = $event->getInvoker()->getModified(true);

        if(isset($modified['filename']))
        {
            $old_path = $this->getFilenameDirPath() . '/'. $modified['filename'];

            if(file_exists($old_path))
            {
                unlink($old_path);
            }

        }
    }

    public function  postDelete($event) {

        if(file_exists($event->getInvoker()->getFilenameFilePath()))
        {
            @unlink($event->getInvoker()->getFilenameFilePath());
        }
    }

    

}
